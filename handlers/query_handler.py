"""
Handler for processing user queries with chat history context
"""
import logging
import re
from telegram import Update
from telegram.ext import CallbackContext
import db_service
from utils.config import IS_DEBUG, TEST_CHAT_ID
from utils.openai_client import invoke_model

def parse_time_period(time_str: str) -> int:
    """
    Parse time period string to minutes
    
    Args:
        time_str: Time period string like '34m', '2h', '1d'
        
    Returns:
        int: Time period in minutes
        
    Raises:
        ValueError: If time_str format is invalid
    """
    # Remove any spaces
    time_str = time_str.strip().lower()
    
    # Match pattern: number followed by m/h/d
    match = re.match(r'^(\d+)([mhd])$', time_str)
    if not match:
        raise ValueError(f"Invalid time format: {time_str}")
    
    number = int(match.group(1))
    unit = match.group(2)
    
    # Convert to minutes
    if unit == 'm':
        return number
    elif unit == 'h':
        return number * 60
    elif unit == 'd':
        return number * 60 * 24
    else:
        raise ValueError(f"Unknown time unit: {unit}")

# Default time period mappings (for examples in help)
EXAMPLE_TIME_PERIODS = {
    '15m': 15,
    '30m': 30, 
    '1h': 60,
    '6h': 360,
    '1d': 1440,  # 24 hours in minutes
}

QUERY_PROMPT_TEMPLATE = """
–¢–∏ —Ä–æ–∑—É–º–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.

–Ü–°–¢–û–†–Ü–Ø –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨:
{history}

–ó–ê–ü–ò–¢ –ö–û–†–ò–°–¢–£–í–ê–ß–ê:
{user_query}

–Ü–ù–°–¢–†–£–ö–¶–Ü–á:
1. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤–∏—â–µ
2. –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ —ñ—Å—Ç–æ—Ä—ñ—ó
3. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
4. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —ñ –∫–æ—Ä–∏—Å–Ω–∏–º
5. –Ø–∫—â–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, —Ç–∞–∫ —ñ —Å–∫–∞–∂–∏

–í–Ü–î–ü–û–í–Ü–î–¨:
"""

async def handle_query_command(update: Update, context: CallbackContext):
    """
    Handle the /ask command with time period and query
    
    Command format: /ask [—á–∏—Å–ª–æ][m/h/d] <your query>
    Examples: 
        /ask 1h –ü—Ä–æ —â–æ –≥–æ–≤–æ—Ä–∏–ª–∏ –≤ –æ—Å—Ç–∞–Ω–Ω—é –≥–æ–¥–∏–Ω—É?
        /ask 30m –•—Ç–æ –±—É–≤ –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏–π?
        /ask 2h –ü—ñ–¥—Å—É–º—É–π –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –∑–∞ 2 –≥–æ–¥–∏–Ω–∏
        /ask 45m –Ø–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è –æ–±–≥–æ–≤–æ—Ä—é–≤–∞–ª–∏?
    
    Args:
        update: Telegram update
        context: Callback context
    """
    if not update.message or not update.message.text:
        return
        
    chat_id = update.effective_chat.id
    # Use test chat ID for local testing if configured
    if TEST_CHAT_ID:
        chat_id = TEST_CHAT_ID
        logging.info(f"[query_handler] Using test chat_id: {chat_id}")
    
    command_text = update.message.text
    
    # Parse command: /ask [time_period] query
    # Remove /ask from the beginning
    query_part = command_text[4:].strip()  # Remove "/ask"
    
    if not query_part:
        await update.message.reply_text(
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /ask [—á–∞—Å–æ–≤–∏–π_–ø–µ—Ä—ñ–æ–¥] <–≤–∞—à –∑–∞–ø–∏—Ç>\n\n"
            "–§–æ—Ä–º–∞—Ç —á–∞—Å—É: [—á–∏—Å–ª–æ][m/h/d] (m=—Ö–≤–∏–ª–∏–Ω–∏, h=–≥–æ–¥–∏–Ω–∏, d=–¥–Ω—ñ)\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
            "‚Ä¢ /ask 1h –ü—Ä–æ —â–æ –≥–æ–≤–æ—Ä–∏–ª–∏ –≤ –æ—Å—Ç–∞–Ω–Ω—é –≥–æ–¥–∏–Ω—É?\n"
            "‚Ä¢ /ask 30m –•—Ç–æ –±—É–≤ –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏–π?\n"
            "‚Ä¢ /ask 2h –ü—ñ–¥—Å—É–º—É–π –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –∑–∞ 2 –≥–æ–¥–∏–Ω–∏\n"
            "‚Ä¢ /ask 45m –Ø–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è –æ–±–≥–æ–≤–æ—Ä—é–≤–∞–ª–∏?\n"
            "‚Ä¢ /ask 1d –ü—ñ–¥—Å—É–º—É–π –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –∑–∞ –¥–µ–Ω—å"
        )
        return
    
    # Try to extract time period from the beginning
    time_period_str = None
    user_query = query_part
    minutes = 60  # Default to 1 hour
    
    # Check if the query starts with a time period pattern
    # Match pattern: number followed by m/h/d and space
    time_match = re.match(r'^(\d+[mhd])\s+(.+)$', query_part, re.IGNORECASE)
    if time_match:
        time_period_str = time_match.group(1)
        user_query = time_match.group(2)
        try:
            minutes = parse_time_period(time_period_str)
        except ValueError as e:
            await update.message.reply_text(
                f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É: {time_period_str}\n"
                f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: [—á–∏—Å–ª–æ][m/h/d] (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 30m, 2h, 1d)"
            )
            return
    else:
        # No time period specified, use default
        time_period_str = '1h'
        user_query = query_part
    
    try:
        logging.info(f"[query_handler] Processing query for chat_id={chat_id}, period={time_period_str}, query='{user_query}'")
        
        # Get chat history for the specified period
        messages = db_service.get_chat_messages_by_period(
            chat_id=chat_id, 
            minutes=minutes, 
            exclude_bots=True
        )
        
        if not messages:
            await update.message.reply_text(
                f"–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {time_period_str} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ."
            )
            return
        
        # Format history for the prompt
        history_text = ""
        for msg in messages:
            history_text += f"–ê–≤—Ç–æ—Ä: {msg['from_user']}\n"
            history_text += f"–ß–∞—Å: {msg['created_at']}\n"
            history_text += f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {msg['text']}\n"
            history_text += "---\n"
        
        # Create the prompt
        prompt = QUERY_PROMPT_TEMPLATE.format(
            history=history_text,
            user_query=user_query
        )
        
        if IS_DEBUG:
            print(f"[query_handler] Sending prompt to LLM: {prompt[:200]}...")
        
        # Get response from LLM
        response = invoke_model(prompt)
        
        # Send response to user
        response_text = f"üìä –ê–Ω–∞–ª—ñ–∑ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {time_period_str}:\n\n{response}"
        await update.message.reply_text(response_text)
        
        if IS_DEBUG:
            print(f"[query_handler] Response sent: {response[:100]}...")
        
    except Exception as e:
        logging.error(f"[query_handler] Error processing query: {e}")
        await update.message.reply_text(
            "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        ) 